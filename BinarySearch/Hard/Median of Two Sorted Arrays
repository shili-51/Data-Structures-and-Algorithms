// https://leetcode.com/problems/median-of-two-sorted-arrays/

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) { 
        int n1 = nums1.size();
        int n2 = nums2.size();

        // we will apply binary search on smaller array 
        if(n1 > n2) return findMedianSortedArrays(nums2,nums1);

        // elements on left side of array with size n1 + n2
        int left = (n1 + n2 + 1)/2;

        // size of cumulated array
        int n = n1 + n2;

        // Binary Search on smaller array to get time complexity O(log(min(m,n)))
        int start = 0;
        int end = n1;

        while(start <= end){
            int mid1 = start + (end - start)/2;
            int mid2 = left - mid1;  // elements taken from second array

            // l1 and l2 maximum elements from left
            int l1 = INT_MIN, l2 = INT_MIN;

            // r1 and r2 minimum elements from right
            int r1 = INT_MAX, r2 = INT_MAX;

            if(mid1 < n1) r1 = nums1[mid1];
            if(mid2 < n2) r2 = nums2[mid2];
            if(mid1 - 1 >= 0) l1 = nums1[mid1 - 1];
            if(mid2 - 1 >= 0) l2 = nums2[mid2 - 1];

            // all elements at left are smaller than right for both arrays
            if(l1 <= r2 && l2 <= r1){
                if(n % 2 == 1) return max(l1,l2);
                else return ((double)(max(l1,l2) + min(r1,r2)))/2.0;
            }


            // greater element is on left for smaller size array
            // need to pick less elements from smaller array

            else if(l1 > r2) end = mid1 - 1;


            // pick more elements from smaller array
            // greater elements on left from larger size array

            else start = mid1 + 1;
        }
        return 0;  
    }
};
