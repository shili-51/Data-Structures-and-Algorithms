// https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/

class Solution {
public:
    int check_divisor(vector<int>& nums, int possible_divisor){
        int sum = 0;
        for(int i=0; i<nums.size(); i++){
            sum += (int)(nums[i]/possible_divisor);
            if(nums[i]%possible_divisor != 0){
                sum = sum + 1;
            }
        }
        return sum;
    }

    int smallestDivisor(vector<int>& nums, int threshold) {
        long long int start = 1;
        long long int end = 0;
        for(int i=0; i<nums.size(); i++){
            end += nums[i];
        }
        long long int ans = 1;
        while(start <= end){
            long long int mid = start + (end - start)/2;
            if(check_divisor(nums, mid) <= threshold){
                ans = mid;
                end = mid - 1;
            }else{
                start = mid + 1; //divide by large number reduces divisor sum
            }
        }
        return (int)ans;
    }
};
