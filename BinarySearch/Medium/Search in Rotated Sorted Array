// https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {

    public int findPivot(int[] nums, int len){
        if(nums[0] > nums[1]) return 0;
        else if(nums[len-2] > nums[len-1]) return len-2;
        int start = 1;
        int end = len - 2;
        while(start <= end){
            int mid = start + (end - start)/2;
            System.out.println("mid in findPivot " + mid);
            if((nums[mid] > nums[mid-1]) & (nums[mid] > nums[mid+1])){
                System.out.println("Pivot" + mid);
                return mid;
            } 
            else if(nums[start] > nums[mid]){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return -1;
    }

    public int binarySearch(int start, int end, int[] nums, int target){
        System.out.println("Start " + start);
        System.out.println("end " + end);
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] > target){
                end = mid - 1;
            }
            else if(nums[mid] < target){
                start = mid + 1;
            } 
            else{
                return mid;
            }
        }
        return -1;
    }

    public int search(int[] nums, int target) {
        int len = nums.length;
        if(len == 1 & nums[0] != target) return -1;
        else if(len == 1 & nums[0] == target) return 0;
        int pivot = findPivot(nums,len);
        System.out.println(pivot);
        int ans = -1;
        if(pivot == -1){
            ans = binarySearch(0,len-1,nums,target);
        }
        else{
            ans = binarySearch(0,pivot,nums,target);
            if(ans == -1){
                ans = binarySearch(pivot + 1,len-1,nums,target);
            }

        }
        return ans;
    }
}
