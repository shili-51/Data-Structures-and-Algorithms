// https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {
public:
    int findIndex(vector<int>& nums, int target){
        int start = 0;
        int n = nums.size();
        int end = n - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(mid < n - 1 && nums[mid] > nums[mid + 1]) return mid;
            if(mid > 0 && nums[mid] < nums[mid - 1]) return mid - 1;
            else if(nums[mid] >= nums[start]) start = mid + 1; //sorted in asc
            else end = mid - 1;
        }
        return -1;
    }

    int binarySearch(vector<int>& nums, int target, int start, int end){
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] > target){
                end = mid - 1;
            }else {
                start = mid + 1;
            }
        }
        return -1;
    }


    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int pivot = findIndex(nums,target);
        if(pivot != -1){
            if(target <= nums[pivot] && target >= nums[0]){
                return binarySearch(nums, target, 0, pivot);
            }else {
                return binarySearch(nums, target, pivot + 1,n-1);
            }
        }
        else{
            return binarySearch(nums, target, 0, n-1);
        }
    }
};
