// https://leetcode.com/problems/single-element-in-a-sorted-array/

class Solution {

    // left half of single element - (even,odd)
    // right half of single element - (odd, even)
    public int singleNonDuplicate(int[] nums) {
        int start = 1;
        int len = nums.length;
        int end = len - 2;
        if(len == 1) return nums[0];
        else if(nums[0] != nums[1]) return nums[0];
        else if(nums[len-1] != nums[len-2]) return nums[len-1];
        while(start <= end){
            int mid = start + (end - start)/2;
            System.out.println(mid);
            if(nums[mid] != nums[mid-1] & nums[mid] != nums[mid+1]) return nums[mid];
            // we are in left half and target lies in right half
            else if(((mid%2 == 0) & (mid < len-1) & (nums[mid] == nums[mid+1])) | ((mid%2 != 0) & (mid > 0) & (nums[mid] == nums[mid-1]))){
                start = mid + 1;
            }
            else{
               end = mid - 1; 
            }
        }
        return nums[start];
    }
}
