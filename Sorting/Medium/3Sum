// https://leetcode.com/problems/3sum/

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>ans;
        set<vector<int>>s;
        sort(nums.begin(), nums.end());
        int i = 0;
        int n = nums.size();
        if(nums[0] == 0 && nums[0] == nums[n-1]) {
            ans.push_back({nums[0],nums[0],nums[0]});
            return ans;
        }
        while(i < n){
            int j = i + 1;
            int k = n - 1;
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0){
                    j++;
                }else if(sum > 0){
                    k--;
                }else{
                    vector<int>temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[j]);
                    temp.push_back(nums[k]);
                    s.insert({temp});
                    j++;
                    k--;
                }
            }
            i++;
        }
        for(auto x : s){
            ans.push_back(x);
        }
        return ans;
    }
};



// Optimised Solution without using Set Data structure

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>ans;
        set<vector<int>>s;
        sort(nums.begin(), nums.end());
        int i = 0;
        int n = nums.size();
        if(nums[0] == 0 && nums[0] == nums[n-1]) {
            ans.push_back({nums[0],nums[0],nums[0]});
            return ans;
        }
        while(i < n){
            if(i>0 && nums[i] == nums[i-1]){
                i++;
                continue;
            }
            int j = i + 1;
            int k = n - 1;
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0){
                    j++;
                }else if(sum > 0){
                    k--;
                }else{
                    vector<int>temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[j]);
                    temp.push_back(nums[k]);

                    // [-2,-2,0,0,2,2]
                    // if triplet -2, 0, 2 - is considered already
                    // in order to skip dupliacte value of triplets
                    while(j < k && nums[j] == nums[j+1]) j++;
                    while(j < k && nums[k] == nums[k-1]) k--;

                    ans.push_back(temp);
                    j++;
                    k--;
                }
            }
            i++;
        }
        return ans;
    }
};
